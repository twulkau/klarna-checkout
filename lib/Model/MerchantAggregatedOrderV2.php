<?php
/**
 * MerchantAggregatedOrderV2
 *
 * PHP version 5
 *
 * @category Class
 * @package  Klarna
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * klarna-checkout
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 20200626163101
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Klarna\Model;

use \ArrayAccess;
use \Klarna\ObjectSerializer;

/**
 * MerchantAggregatedOrderV2 Class Doc Comment
 *
 * @category Class
 * @package  Klarna
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MerchantAggregatedOrderV2 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MerchantAggregatedOrderV2';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'terms_uri' => 'string',
        'checkout_uri' => 'string',
        'confirmation_uri' => 'string',
        'push_uri' => 'string',
        'validation_uri' => 'string',
        'back_to_store_uri' => 'string',
        'cancellation_terms_uri' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'terms_uri' => null,
        'checkout_uri' => null,
        'confirmation_uri' => null,
        'push_uri' => null,
        'validation_uri' => null,
        'back_to_store_uri' => null,
        'cancellation_terms_uri' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'terms_uri' => 'terms_uri',
        'checkout_uri' => 'checkout_uri',
        'confirmation_uri' => 'confirmation_uri',
        'push_uri' => 'push_uri',
        'validation_uri' => 'validation_uri',
        'back_to_store_uri' => 'back_to_store_uri',
        'cancellation_terms_uri' => 'cancellation_terms_uri'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'terms_uri' => 'setTermsUri',
        'checkout_uri' => 'setCheckoutUri',
        'confirmation_uri' => 'setConfirmationUri',
        'push_uri' => 'setPushUri',
        'validation_uri' => 'setValidationUri',
        'back_to_store_uri' => 'setBackToStoreUri',
        'cancellation_terms_uri' => 'setCancellationTermsUri'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'terms_uri' => 'getTermsUri',
        'checkout_uri' => 'getCheckoutUri',
        'confirmation_uri' => 'getConfirmationUri',
        'push_uri' => 'getPushUri',
        'validation_uri' => 'getValidationUri',
        'back_to_store_uri' => 'getBackToStoreUri',
        'cancellation_terms_uri' => 'getCancellationTermsUri'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['terms_uri'] = isset($data['terms_uri']) ? $data['terms_uri'] : null;
        $this->container['checkout_uri'] = isset($data['checkout_uri']) ? $data['checkout_uri'] : null;
        $this->container['confirmation_uri'] = isset($data['confirmation_uri']) ? $data['confirmation_uri'] : null;
        $this->container['push_uri'] = isset($data['push_uri']) ? $data['push_uri'] : null;
        $this->container['validation_uri'] = isset($data['validation_uri']) ? $data['validation_uri'] : null;
        $this->container['back_to_store_uri'] = isset($data['back_to_store_uri']) ? $data['back_to_store_uri'] : null;
        $this->container['cancellation_terms_uri'] = isset($data['cancellation_terms_uri']) ? $data['cancellation_terms_uri'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['terms_uri']) && (mb_strlen($this->container['terms_uri']) > 2000)) {
            $invalidProperties[] = "invalid value for 'terms_uri', the character length must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['terms_uri']) && (mb_strlen($this->container['terms_uri']) < 0)) {
            $invalidProperties[] = "invalid value for 'terms_uri', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['checkout_uri']) && (mb_strlen($this->container['checkout_uri']) > 2000)) {
            $invalidProperties[] = "invalid value for 'checkout_uri', the character length must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['checkout_uri']) && (mb_strlen($this->container['checkout_uri']) < 0)) {
            $invalidProperties[] = "invalid value for 'checkout_uri', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['confirmation_uri']) && (mb_strlen($this->container['confirmation_uri']) > 2000)) {
            $invalidProperties[] = "invalid value for 'confirmation_uri', the character length must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['confirmation_uri']) && (mb_strlen($this->container['confirmation_uri']) < 0)) {
            $invalidProperties[] = "invalid value for 'confirmation_uri', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['push_uri']) && (mb_strlen($this->container['push_uri']) > 2000)) {
            $invalidProperties[] = "invalid value for 'push_uri', the character length must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['push_uri']) && (mb_strlen($this->container['push_uri']) < 0)) {
            $invalidProperties[] = "invalid value for 'push_uri', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['validation_uri']) && (mb_strlen($this->container['validation_uri']) > 2000)) {
            $invalidProperties[] = "invalid value for 'validation_uri', the character length must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['validation_uri']) && (mb_strlen($this->container['validation_uri']) < 0)) {
            $invalidProperties[] = "invalid value for 'validation_uri', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['back_to_store_uri']) && (mb_strlen($this->container['back_to_store_uri']) > 2000)) {
            $invalidProperties[] = "invalid value for 'back_to_store_uri', the character length must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['back_to_store_uri']) && (mb_strlen($this->container['back_to_store_uri']) < 0)) {
            $invalidProperties[] = "invalid value for 'back_to_store_uri', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['cancellation_terms_uri']) && (mb_strlen($this->container['cancellation_terms_uri']) > 2000)) {
            $invalidProperties[] = "invalid value for 'cancellation_terms_uri', the character length must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['cancellation_terms_uri']) && (mb_strlen($this->container['cancellation_terms_uri']) < 0)) {
            $invalidProperties[] = "invalid value for 'cancellation_terms_uri', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets terms_uri
     *
     * @return string
     */
    public function getTermsUri()
    {
        return $this->container['terms_uri'];
    }

    /**
     * Sets terms_uri
     *
     * @param string $terms_uri terms_uri
     *
     * @return $this
     */
    public function setTermsUri($terms_uri)
    {
        if (!is_null($terms_uri) && (mb_strlen($terms_uri) > 2000)) {
            throw new \InvalidArgumentException('invalid length for $terms_uri when calling MerchantAggregatedOrderV2., must be smaller than or equal to 2000.');
        }
        if (!is_null($terms_uri) && (mb_strlen($terms_uri) < 0)) {
            throw new \InvalidArgumentException('invalid length for $terms_uri when calling MerchantAggregatedOrderV2., must be bigger than or equal to 0.');
        }

        $this->container['terms_uri'] = $terms_uri;

        return $this;
    }

    /**
     * Gets checkout_uri
     *
     * @return string
     */
    public function getCheckoutUri()
    {
        return $this->container['checkout_uri'];
    }

    /**
     * Sets checkout_uri
     *
     * @param string $checkout_uri checkout_uri
     *
     * @return $this
     */
    public function setCheckoutUri($checkout_uri)
    {
        if (!is_null($checkout_uri) && (mb_strlen($checkout_uri) > 2000)) {
            throw new \InvalidArgumentException('invalid length for $checkout_uri when calling MerchantAggregatedOrderV2., must be smaller than or equal to 2000.');
        }
        if (!is_null($checkout_uri) && (mb_strlen($checkout_uri) < 0)) {
            throw new \InvalidArgumentException('invalid length for $checkout_uri when calling MerchantAggregatedOrderV2., must be bigger than or equal to 0.');
        }

        $this->container['checkout_uri'] = $checkout_uri;

        return $this;
    }

    /**
     * Gets confirmation_uri
     *
     * @return string
     */
    public function getConfirmationUri()
    {
        return $this->container['confirmation_uri'];
    }

    /**
     * Sets confirmation_uri
     *
     * @param string $confirmation_uri confirmation_uri
     *
     * @return $this
     */
    public function setConfirmationUri($confirmation_uri)
    {
        if (!is_null($confirmation_uri) && (mb_strlen($confirmation_uri) > 2000)) {
            throw new \InvalidArgumentException('invalid length for $confirmation_uri when calling MerchantAggregatedOrderV2., must be smaller than or equal to 2000.');
        }
        if (!is_null($confirmation_uri) && (mb_strlen($confirmation_uri) < 0)) {
            throw new \InvalidArgumentException('invalid length for $confirmation_uri when calling MerchantAggregatedOrderV2., must be bigger than or equal to 0.');
        }

        $this->container['confirmation_uri'] = $confirmation_uri;

        return $this;
    }

    /**
     * Gets push_uri
     *
     * @return string
     */
    public function getPushUri()
    {
        return $this->container['push_uri'];
    }

    /**
     * Sets push_uri
     *
     * @param string $push_uri push_uri
     *
     * @return $this
     */
    public function setPushUri($push_uri)
    {
        if (!is_null($push_uri) && (mb_strlen($push_uri) > 2000)) {
            throw new \InvalidArgumentException('invalid length for $push_uri when calling MerchantAggregatedOrderV2., must be smaller than or equal to 2000.');
        }
        if (!is_null($push_uri) && (mb_strlen($push_uri) < 0)) {
            throw new \InvalidArgumentException('invalid length for $push_uri when calling MerchantAggregatedOrderV2., must be bigger than or equal to 0.');
        }

        $this->container['push_uri'] = $push_uri;

        return $this;
    }

    /**
     * Gets validation_uri
     *
     * @return string
     */
    public function getValidationUri()
    {
        return $this->container['validation_uri'];
    }

    /**
     * Sets validation_uri
     *
     * @param string $validation_uri validation_uri
     *
     * @return $this
     */
    public function setValidationUri($validation_uri)
    {
        if (!is_null($validation_uri) && (mb_strlen($validation_uri) > 2000)) {
            throw new \InvalidArgumentException('invalid length for $validation_uri when calling MerchantAggregatedOrderV2., must be smaller than or equal to 2000.');
        }
        if (!is_null($validation_uri) && (mb_strlen($validation_uri) < 0)) {
            throw new \InvalidArgumentException('invalid length for $validation_uri when calling MerchantAggregatedOrderV2., must be bigger than or equal to 0.');
        }

        $this->container['validation_uri'] = $validation_uri;

        return $this;
    }

    /**
     * Gets back_to_store_uri
     *
     * @return string
     */
    public function getBackToStoreUri()
    {
        return $this->container['back_to_store_uri'];
    }

    /**
     * Sets back_to_store_uri
     *
     * @param string $back_to_store_uri back_to_store_uri
     *
     * @return $this
     */
    public function setBackToStoreUri($back_to_store_uri)
    {
        if (!is_null($back_to_store_uri) && (mb_strlen($back_to_store_uri) > 2000)) {
            throw new \InvalidArgumentException('invalid length for $back_to_store_uri when calling MerchantAggregatedOrderV2., must be smaller than or equal to 2000.');
        }
        if (!is_null($back_to_store_uri) && (mb_strlen($back_to_store_uri) < 0)) {
            throw new \InvalidArgumentException('invalid length for $back_to_store_uri when calling MerchantAggregatedOrderV2., must be bigger than or equal to 0.');
        }

        $this->container['back_to_store_uri'] = $back_to_store_uri;

        return $this;
    }

    /**
     * Gets cancellation_terms_uri
     *
     * @return string
     */
    public function getCancellationTermsUri()
    {
        return $this->container['cancellation_terms_uri'];
    }

    /**
     * Sets cancellation_terms_uri
     *
     * @param string $cancellation_terms_uri cancellation_terms_uri
     *
     * @return $this
     */
    public function setCancellationTermsUri($cancellation_terms_uri)
    {
        if (!is_null($cancellation_terms_uri) && (mb_strlen($cancellation_terms_uri) > 2000)) {
            throw new \InvalidArgumentException('invalid length for $cancellation_terms_uri when calling MerchantAggregatedOrderV2., must be smaller than or equal to 2000.');
        }
        if (!is_null($cancellation_terms_uri) && (mb_strlen($cancellation_terms_uri) < 0)) {
            throw new \InvalidArgumentException('invalid length for $cancellation_terms_uri when calling MerchantAggregatedOrderV2., must be bigger than or equal to 0.');
        }

        $this->container['cancellation_terms_uri'] = $cancellation_terms_uri;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


