<?php
/**
 * AggregatedOrderCartItemV2
 *
 * PHP version 5
 *
 * @category Class
 * @package  Klarna
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * klarna-checkout
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 20200626163101
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Klarna\Model;

use \ArrayAccess;
use \Klarna\ObjectSerializer;

/**
 * AggregatedOrderCartItemV2 Class Doc Comment
 *
 * @category Class
 * @package  Klarna
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AggregatedOrderCartItemV2 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AggregatedOrderCartItemV2';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'type' => 'string',
        'name' => 'string',
        'quantity' => 'int',
        'reference' => 'string',
        'discount_rate' => 'int',
        'tax_rate' => 'int',
        'unit_price' => 'int',
        'merchant_item_data' => 'string',
        'total_price_including_tax' => 'int',
        'total_tax_amount' => 'int',
        'total_price_excluding_tax' => 'int',
        'image_uri' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'type' => null,
        'name' => null,
        'quantity' => 'int64',
        'reference' => null,
        'discount_rate' => 'int64',
        'tax_rate' => 'int64',
        'unit_price' => 'int64',
        'merchant_item_data' => null,
        'total_price_including_tax' => 'int64',
        'total_tax_amount' => 'int64',
        'total_price_excluding_tax' => 'int64',
        'image_uri' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'name' => 'name',
        'quantity' => 'quantity',
        'reference' => 'reference',
        'discount_rate' => 'discount_rate',
        'tax_rate' => 'tax_rate',
        'unit_price' => 'unit_price',
        'merchant_item_data' => 'merchant_item_data',
        'total_price_including_tax' => 'total_price_including_tax',
        'total_tax_amount' => 'total_tax_amount',
        'total_price_excluding_tax' => 'total_price_excluding_tax',
        'image_uri' => 'image_uri'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'name' => 'setName',
        'quantity' => 'setQuantity',
        'reference' => 'setReference',
        'discount_rate' => 'setDiscountRate',
        'tax_rate' => 'setTaxRate',
        'unit_price' => 'setUnitPrice',
        'merchant_item_data' => 'setMerchantItemData',
        'total_price_including_tax' => 'setTotalPriceIncludingTax',
        'total_tax_amount' => 'setTotalTaxAmount',
        'total_price_excluding_tax' => 'setTotalPriceExcludingTax',
        'image_uri' => 'setImageUri'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'name' => 'getName',
        'quantity' => 'getQuantity',
        'reference' => 'getReference',
        'discount_rate' => 'getDiscountRate',
        'tax_rate' => 'getTaxRate',
        'unit_price' => 'getUnitPrice',
        'merchant_item_data' => 'getMerchantItemData',
        'total_price_including_tax' => 'getTotalPriceIncludingTax',
        'total_tax_amount' => 'getTotalTaxAmount',
        'total_price_excluding_tax' => 'getTotalPriceExcludingTax',
        'image_uri' => 'getImageUri'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['reference'] = isset($data['reference']) ? $data['reference'] : null;
        $this->container['discount_rate'] = isset($data['discount_rate']) ? $data['discount_rate'] : null;
        $this->container['tax_rate'] = isset($data['tax_rate']) ? $data['tax_rate'] : null;
        $this->container['unit_price'] = isset($data['unit_price']) ? $data['unit_price'] : null;
        $this->container['merchant_item_data'] = isset($data['merchant_item_data']) ? $data['merchant_item_data'] : null;
        $this->container['total_price_including_tax'] = isset($data['total_price_including_tax']) ? $data['total_price_including_tax'] : null;
        $this->container['total_tax_amount'] = isset($data['total_tax_amount']) ? $data['total_tax_amount'] : null;
        $this->container['total_price_excluding_tax'] = isset($data['total_price_excluding_tax']) ? $data['total_price_excluding_tax'] : null;
        $this->container['image_uri'] = isset($data['image_uri']) ? $data['image_uri'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if (!is_null($this->container['quantity']) && ($this->container['quantity'] < 0)) {
            $invalidProperties[] = "invalid value for 'quantity', must be bigger than or equal to 0.";
        }

        if ($this->container['tax_rate'] === null) {
            $invalidProperties[] = "'tax_rate' can't be null";
        }
        if (($this->container['tax_rate'] > 10000)) {
            $invalidProperties[] = "invalid value for 'tax_rate', must be smaller than or equal to 10000.";
        }

        if ($this->container['unit_price'] === null) {
            $invalidProperties[] = "'unit_price' can't be null";
        }
        if (!is_null($this->container['merchant_item_data']) && (mb_strlen($this->container['merchant_item_data']) > 1024)) {
            $invalidProperties[] = "invalid value for 'merchant_item_data', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['merchant_item_data']) && (mb_strlen($this->container['merchant_item_data']) < 0)) {
            $invalidProperties[] = "invalid value for 'merchant_item_data', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['image_uri']) && (mb_strlen($this->container['image_uri']) > 1024)) {
            $invalidProperties[] = "invalid value for 'image_uri', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['image_uri']) && (mb_strlen($this->container['image_uri']) < 0)) {
            $invalidProperties[] = "invalid value for 'image_uri', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int $quantity quantity
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {

        if (!is_null($quantity) && ($quantity < 0)) {
            throw new \InvalidArgumentException('invalid value for $quantity when calling AggregatedOrderCartItemV2., must be bigger than or equal to 0.');
        }

        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string $reference reference
     *
     * @return $this
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets discount_rate
     *
     * @return int
     */
    public function getDiscountRate()
    {
        return $this->container['discount_rate'];
    }

    /**
     * Sets discount_rate
     *
     * @param int $discount_rate discount_rate
     *
     * @return $this
     */
    public function setDiscountRate($discount_rate)
    {
        $this->container['discount_rate'] = $discount_rate;

        return $this;
    }

    /**
     * Gets tax_rate
     *
     * @return int
     */
    public function getTaxRate()
    {
        return $this->container['tax_rate'];
    }

    /**
     * Sets tax_rate
     *
     * @param int $tax_rate tax_rate
     *
     * @return $this
     */
    public function setTaxRate($tax_rate)
    {

        if (($tax_rate > 10000)) {
            throw new \InvalidArgumentException('invalid value for $tax_rate when calling AggregatedOrderCartItemV2., must be smaller than or equal to 10000.');
        }

        $this->container['tax_rate'] = $tax_rate;

        return $this;
    }

    /**
     * Gets unit_price
     *
     * @return int
     */
    public function getUnitPrice()
    {
        return $this->container['unit_price'];
    }

    /**
     * Sets unit_price
     *
     * @param int $unit_price unit_price
     *
     * @return $this
     */
    public function setUnitPrice($unit_price)
    {
        $this->container['unit_price'] = $unit_price;

        return $this;
    }

    /**
     * Gets merchant_item_data
     *
     * @return string
     */
    public function getMerchantItemData()
    {
        return $this->container['merchant_item_data'];
    }

    /**
     * Sets merchant_item_data
     *
     * @param string $merchant_item_data merchant_item_data
     *
     * @return $this
     */
    public function setMerchantItemData($merchant_item_data)
    {
        if (!is_null($merchant_item_data) && (mb_strlen($merchant_item_data) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $merchant_item_data when calling AggregatedOrderCartItemV2., must be smaller than or equal to 1024.');
        }
        if (!is_null($merchant_item_data) && (mb_strlen($merchant_item_data) < 0)) {
            throw new \InvalidArgumentException('invalid length for $merchant_item_data when calling AggregatedOrderCartItemV2., must be bigger than or equal to 0.');
        }

        $this->container['merchant_item_data'] = $merchant_item_data;

        return $this;
    }

    /**
     * Gets total_price_including_tax
     *
     * @return int
     */
    public function getTotalPriceIncludingTax()
    {
        return $this->container['total_price_including_tax'];
    }

    /**
     * Sets total_price_including_tax
     *
     * @param int $total_price_including_tax total_price_including_tax
     *
     * @return $this
     */
    public function setTotalPriceIncludingTax($total_price_including_tax)
    {
        $this->container['total_price_including_tax'] = $total_price_including_tax;

        return $this;
    }

    /**
     * Gets total_tax_amount
     *
     * @return int
     */
    public function getTotalTaxAmount()
    {
        return $this->container['total_tax_amount'];
    }

    /**
     * Sets total_tax_amount
     *
     * @param int $total_tax_amount total_tax_amount
     *
     * @return $this
     */
    public function setTotalTaxAmount($total_tax_amount)
    {
        $this->container['total_tax_amount'] = $total_tax_amount;

        return $this;
    }

    /**
     * Gets total_price_excluding_tax
     *
     * @return int
     */
    public function getTotalPriceExcludingTax()
    {
        return $this->container['total_price_excluding_tax'];
    }

    /**
     * Sets total_price_excluding_tax
     *
     * @param int $total_price_excluding_tax total_price_excluding_tax
     *
     * @return $this
     */
    public function setTotalPriceExcludingTax($total_price_excluding_tax)
    {
        $this->container['total_price_excluding_tax'] = $total_price_excluding_tax;

        return $this;
    }

    /**
     * Gets image_uri
     *
     * @return string
     */
    public function getImageUri()
    {
        return $this->container['image_uri'];
    }

    /**
     * Sets image_uri
     *
     * @param string $image_uri image_uri
     *
     * @return $this
     */
    public function setImageUri($image_uri)
    {
        if (!is_null($image_uri) && (mb_strlen($image_uri) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $image_uri when calling AggregatedOrderCartItemV2., must be smaller than or equal to 1024.');
        }
        if (!is_null($image_uri) && (mb_strlen($image_uri) < 0)) {
            throw new \InvalidArgumentException('invalid length for $image_uri when calling AggregatedOrderCartItemV2., must be bigger than or equal to 0.');
        }

        $this->container['image_uri'] = $image_uri;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


