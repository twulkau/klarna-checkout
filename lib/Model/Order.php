<?php
/**
 * Order
 *
 * PHP version 5
 *
 * @category Class
 * @package  Klarna
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * klarna-checkout
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 20200626163101
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Klarna\Model;

use \ArrayAccess;
use \Klarna\ObjectSerializer;

/**
 * Order Class Doc Comment
 *
 * @category Class
 * @package  Klarna
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Order implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'order';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'order_id' => 'string',
        'name' => 'string',
        'purchase_country' => 'string',
        'purchase_currency' => 'string',
        'locale' => 'string',
        'status' => 'string',
        'billing_address' => '\Klarna\Model\Address',
        'shipping_address' => '\Klarna\Model\Address',
        'order_amount' => 'int',
        'order_tax_amount' => 'int',
        'order_lines' => '\Klarna\Model\OrderLine[]',
        'customer' => '\Klarna\Model\Customer',
        'merchant_urls' => '\Klarna\Model\MerchantUrls',
        'html_snippet' => 'string',
        'merchant_reference1' => 'string',
        'merchant_reference2' => 'string',
        'started_at' => '\DateTime',
        'completed_at' => '\DateTime',
        'last_modified_at' => '\DateTime',
        'options' => '\Klarna\Model\Options',
        'attachment' => '\Klarna\Model\Attachment',
        'external_payment_methods' => '\Klarna\Model\PaymentProvider[]',
        'external_checkouts' => '\Klarna\Model\PaymentProvider[]',
        'shipping_countries' => 'string[]',
        'shipping_options' => '\Klarna\Model\ShippingOption[]',
        'merchant_data' => 'string',
        'gui' => '\Klarna\Model\Gui',
        'merchant_requested' => '\Klarna\Model\MerchantRequested',
        'selected_shipping_option' => '\Klarna\Model\ShippingOption',
        'recurring' => 'bool',
        'recurring_token' => 'string',
        'recurring_description' => 'string',
        'billing_countries' => 'string[]',
        'tags' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'order_id' => null,
        'name' => null,
        'purchase_country' => null,
        'purchase_currency' => null,
        'locale' => null,
        'status' => null,
        'billing_address' => null,
        'shipping_address' => null,
        'order_amount' => 'int64',
        'order_tax_amount' => 'int64',
        'order_lines' => null,
        'customer' => null,
        'merchant_urls' => null,
        'html_snippet' => null,
        'merchant_reference1' => null,
        'merchant_reference2' => null,
        'started_at' => 'date-time',
        'completed_at' => 'date-time',
        'last_modified_at' => 'date-time',
        'options' => null,
        'attachment' => null,
        'external_payment_methods' => null,
        'external_checkouts' => null,
        'shipping_countries' => null,
        'shipping_options' => null,
        'merchant_data' => null,
        'gui' => null,
        'merchant_requested' => null,
        'selected_shipping_option' => null,
        'recurring' => null,
        'recurring_token' => null,
        'recurring_description' => null,
        'billing_countries' => null,
        'tags' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'order_id' => 'order_id',
        'name' => 'name',
        'purchase_country' => 'purchase_country',
        'purchase_currency' => 'purchase_currency',
        'locale' => 'locale',
        'status' => 'status',
        'billing_address' => 'billing_address',
        'shipping_address' => 'shipping_address',
        'order_amount' => 'order_amount',
        'order_tax_amount' => 'order_tax_amount',
        'order_lines' => 'order_lines',
        'customer' => 'customer',
        'merchant_urls' => 'merchant_urls',
        'html_snippet' => 'html_snippet',
        'merchant_reference1' => 'merchant_reference1',
        'merchant_reference2' => 'merchant_reference2',
        'started_at' => 'started_at',
        'completed_at' => 'completed_at',
        'last_modified_at' => 'last_modified_at',
        'options' => 'options',
        'attachment' => 'attachment',
        'external_payment_methods' => 'external_payment_methods',
        'external_checkouts' => 'external_checkouts',
        'shipping_countries' => 'shipping_countries',
        'shipping_options' => 'shipping_options',
        'merchant_data' => 'merchant_data',
        'gui' => 'gui',
        'merchant_requested' => 'merchant_requested',
        'selected_shipping_option' => 'selected_shipping_option',
        'recurring' => 'recurring',
        'recurring_token' => 'recurring_token',
        'recurring_description' => 'recurring_description',
        'billing_countries' => 'billing_countries',
        'tags' => 'tags'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'order_id' => 'setOrderId',
        'name' => 'setName',
        'purchase_country' => 'setPurchaseCountry',
        'purchase_currency' => 'setPurchaseCurrency',
        'locale' => 'setLocale',
        'status' => 'setStatus',
        'billing_address' => 'setBillingAddress',
        'shipping_address' => 'setShippingAddress',
        'order_amount' => 'setOrderAmount',
        'order_tax_amount' => 'setOrderTaxAmount',
        'order_lines' => 'setOrderLines',
        'customer' => 'setCustomer',
        'merchant_urls' => 'setMerchantUrls',
        'html_snippet' => 'setHtmlSnippet',
        'merchant_reference1' => 'setMerchantReference1',
        'merchant_reference2' => 'setMerchantReference2',
        'started_at' => 'setStartedAt',
        'completed_at' => 'setCompletedAt',
        'last_modified_at' => 'setLastModifiedAt',
        'options' => 'setOptions',
        'attachment' => 'setAttachment',
        'external_payment_methods' => 'setExternalPaymentMethods',
        'external_checkouts' => 'setExternalCheckouts',
        'shipping_countries' => 'setShippingCountries',
        'shipping_options' => 'setShippingOptions',
        'merchant_data' => 'setMerchantData',
        'gui' => 'setGui',
        'merchant_requested' => 'setMerchantRequested',
        'selected_shipping_option' => 'setSelectedShippingOption',
        'recurring' => 'setRecurring',
        'recurring_token' => 'setRecurringToken',
        'recurring_description' => 'setRecurringDescription',
        'billing_countries' => 'setBillingCountries',
        'tags' => 'setTags'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'order_id' => 'getOrderId',
        'name' => 'getName',
        'purchase_country' => 'getPurchaseCountry',
        'purchase_currency' => 'getPurchaseCurrency',
        'locale' => 'getLocale',
        'status' => 'getStatus',
        'billing_address' => 'getBillingAddress',
        'shipping_address' => 'getShippingAddress',
        'order_amount' => 'getOrderAmount',
        'order_tax_amount' => 'getOrderTaxAmount',
        'order_lines' => 'getOrderLines',
        'customer' => 'getCustomer',
        'merchant_urls' => 'getMerchantUrls',
        'html_snippet' => 'getHtmlSnippet',
        'merchant_reference1' => 'getMerchantReference1',
        'merchant_reference2' => 'getMerchantReference2',
        'started_at' => 'getStartedAt',
        'completed_at' => 'getCompletedAt',
        'last_modified_at' => 'getLastModifiedAt',
        'options' => 'getOptions',
        'attachment' => 'getAttachment',
        'external_payment_methods' => 'getExternalPaymentMethods',
        'external_checkouts' => 'getExternalCheckouts',
        'shipping_countries' => 'getShippingCountries',
        'shipping_options' => 'getShippingOptions',
        'merchant_data' => 'getMerchantData',
        'gui' => 'getGui',
        'merchant_requested' => 'getMerchantRequested',
        'selected_shipping_option' => 'getSelectedShippingOption',
        'recurring' => 'getRecurring',
        'recurring_token' => 'getRecurringToken',
        'recurring_description' => 'getRecurringDescription',
        'billing_countries' => 'getBillingCountries',
        'tags' => 'getTags'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['order_id'] = isset($data['order_id']) ? $data['order_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['purchase_country'] = isset($data['purchase_country']) ? $data['purchase_country'] : null;
        $this->container['purchase_currency'] = isset($data['purchase_currency']) ? $data['purchase_currency'] : null;
        $this->container['locale'] = isset($data['locale']) ? $data['locale'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['billing_address'] = isset($data['billing_address']) ? $data['billing_address'] : null;
        $this->container['shipping_address'] = isset($data['shipping_address']) ? $data['shipping_address'] : null;
        $this->container['order_amount'] = isset($data['order_amount']) ? $data['order_amount'] : null;
        $this->container['order_tax_amount'] = isset($data['order_tax_amount']) ? $data['order_tax_amount'] : null;
        $this->container['order_lines'] = isset($data['order_lines']) ? $data['order_lines'] : null;
        $this->container['customer'] = isset($data['customer']) ? $data['customer'] : null;
        $this->container['merchant_urls'] = isset($data['merchant_urls']) ? $data['merchant_urls'] : null;
        $this->container['html_snippet'] = isset($data['html_snippet']) ? $data['html_snippet'] : null;
        $this->container['merchant_reference1'] = isset($data['merchant_reference1']) ? $data['merchant_reference1'] : null;
        $this->container['merchant_reference2'] = isset($data['merchant_reference2']) ? $data['merchant_reference2'] : null;
        $this->container['started_at'] = isset($data['started_at']) ? $data['started_at'] : null;
        $this->container['completed_at'] = isset($data['completed_at']) ? $data['completed_at'] : null;
        $this->container['last_modified_at'] = isset($data['last_modified_at']) ? $data['last_modified_at'] : null;
        $this->container['options'] = isset($data['options']) ? $data['options'] : null;
        $this->container['attachment'] = isset($data['attachment']) ? $data['attachment'] : null;
        $this->container['external_payment_methods'] = isset($data['external_payment_methods']) ? $data['external_payment_methods'] : null;
        $this->container['external_checkouts'] = isset($data['external_checkouts']) ? $data['external_checkouts'] : null;
        $this->container['shipping_countries'] = isset($data['shipping_countries']) ? $data['shipping_countries'] : null;
        $this->container['shipping_options'] = isset($data['shipping_options']) ? $data['shipping_options'] : null;
        $this->container['merchant_data'] = isset($data['merchant_data']) ? $data['merchant_data'] : null;
        $this->container['gui'] = isset($data['gui']) ? $data['gui'] : null;
        $this->container['merchant_requested'] = isset($data['merchant_requested']) ? $data['merchant_requested'] : null;
        $this->container['selected_shipping_option'] = isset($data['selected_shipping_option']) ? $data['selected_shipping_option'] : null;
        $this->container['recurring'] = isset($data['recurring']) ? $data['recurring'] : false;
        $this->container['recurring_token'] = isset($data['recurring_token']) ? $data['recurring_token'] : null;
        $this->container['recurring_description'] = isset($data['recurring_description']) ? $data['recurring_description'] : null;
        $this->container['billing_countries'] = isset($data['billing_countries']) ? $data['billing_countries'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['purchase_country'] === null) {
            $invalidProperties[] = "'purchase_country' can't be null";
        }
        if (!preg_match("/^[A-Za-z]{2,2}$/", $this->container['purchase_country'])) {
            $invalidProperties[] = "invalid value for 'purchase_country', must be conform to the pattern /^[A-Za-z]{2,2}$/.";
        }

        if ($this->container['purchase_currency'] === null) {
            $invalidProperties[] = "'purchase_currency' can't be null";
        }
        if (!preg_match("/^[A-Za-z]{3,3}$/", $this->container['purchase_currency'])) {
            $invalidProperties[] = "invalid value for 'purchase_currency', must be conform to the pattern /^[A-Za-z]{3,3}$/.";
        }

        if ($this->container['locale'] === null) {
            $invalidProperties[] = "'locale' can't be null";
        }
        if (!preg_match("/^[A-Za-z]{2,2}(?:-[A-Za-z]{2,2})*$/", $this->container['locale'])) {
            $invalidProperties[] = "invalid value for 'locale', must be conform to the pattern /^[A-Za-z]{2,2}(?:-[A-Za-z]{2,2})*$/.";
        }

        if ($this->container['order_amount'] === null) {
            $invalidProperties[] = "'order_amount' can't be null";
        }
        if (($this->container['order_amount'] < 0)) {
            $invalidProperties[] = "invalid value for 'order_amount', must be bigger than or equal to 0.";
        }

        if ($this->container['order_tax_amount'] === null) {
            $invalidProperties[] = "'order_tax_amount' can't be null";
        }
        if (($this->container['order_tax_amount'] < 0)) {
            $invalidProperties[] = "invalid value for 'order_tax_amount', must be bigger than or equal to 0.";
        }

        if ($this->container['order_lines'] === null) {
            $invalidProperties[] = "'order_lines' can't be null";
        }
        if ($this->container['merchant_urls'] === null) {
            $invalidProperties[] = "'merchant_urls' can't be null";
        }
        if (!is_null($this->container['merchant_reference1']) && (mb_strlen($this->container['merchant_reference1']) > 255)) {
            $invalidProperties[] = "invalid value for 'merchant_reference1', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['merchant_reference1']) && (mb_strlen($this->container['merchant_reference1']) < 0)) {
            $invalidProperties[] = "invalid value for 'merchant_reference1', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['merchant_reference2']) && (mb_strlen($this->container['merchant_reference2']) > 255)) {
            $invalidProperties[] = "invalid value for 'merchant_reference2', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['merchant_reference2']) && (mb_strlen($this->container['merchant_reference2']) < 0)) {
            $invalidProperties[] = "invalid value for 'merchant_reference2', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['merchant_data']) && (mb_strlen($this->container['merchant_data']) > 6000)) {
            $invalidProperties[] = "invalid value for 'merchant_data', the character length must be smaller than or equal to 6000.";
        }

        if (!is_null($this->container['merchant_data']) && (mb_strlen($this->container['merchant_data']) < 0)) {
            $invalidProperties[] = "invalid value for 'merchant_data', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['recurring_description']) && (mb_strlen($this->container['recurring_description']) > 255)) {
            $invalidProperties[] = "invalid value for 'recurring_description', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['recurring_description']) && (mb_strlen($this->container['recurring_description']) < 0)) {
            $invalidProperties[] = "invalid value for 'recurring_description', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets order_id
     *
     * @return string
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param string $order_id Unique order ID that will be used for the entire lifecycle of the order. (max 255 characters)
     *
     * @return $this
     */
    public function setOrderId($order_id)
    {
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The merchant name (max 255 characters).
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets purchase_country
     *
     * @return string
     */
    public function getPurchaseCountry()
    {
        return $this->container['purchase_country'];
    }

    /**
     * Sets purchase_country
     *
     * @param string $purchase_country purchase country of the merchant's store. The format to be used is ISO 3166 alpha-2. Eg: GB, SE, DE, US, etc.   Note: purchase country and currency need to match the defined merchant configuration. For global configuration read this https://developers.klarna.com/documentation/klarna-checkout/kco-global/
     *
     * @return $this
     */
    public function setPurchaseCountry($purchase_country)
    {

        if ((!preg_match("/^[A-Za-z]{2,2}$/", $purchase_country))) {
            throw new \InvalidArgumentException("invalid value for $purchase_country when calling Order., must conform to the pattern /^[A-Za-z]{2,2}$/.");
        }

        $this->container['purchase_country'] = $purchase_country;

        return $this;
    }

    /**
     * Gets purchase_currency
     *
     * @return string
     */
    public function getPurchaseCurrency()
    {
        return $this->container['purchase_currency'];
    }

    /**
     * Sets purchase_currency
     *
     * @param string $purchase_currency purchase currency of the merchant's store. The format to be used is ISO 4217. Eg: USD, EUR, SEK, GBP, etc.  Note: purchase country and currency need to match the defined merchant configuration. For global configuration read this https://developers.klarna.com/documentation/klarna-checkout/kco-global/
     *
     * @return $this
     */
    public function setPurchaseCurrency($purchase_currency)
    {

        if ((!preg_match("/^[A-Za-z]{3,3}$/", $purchase_currency))) {
            throw new \InvalidArgumentException("invalid value for $purchase_currency when calling Order., must conform to the pattern /^[A-Za-z]{3,3}$/.");
        }

        $this->container['purchase_currency'] = $purchase_currency;

        return $this;
    }

    /**
     * Gets locale
     *
     * @return string
     */
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param string $locale Used to define the language and region of the customer. RFC 1766 customer's locale.
     *
     * @return $this
     */
    public function setLocale($locale)
    {

        if ((!preg_match("/^[A-Za-z]{2,2}(?:-[A-Za-z]{2,2})*$/", $locale))) {
            throw new \InvalidArgumentException("invalid value for $locale when calling Order., must conform to the pattern /^[A-Za-z]{2,2}(?:-[A-Za-z]{2,2})*$/.");
        }

        $this->container['locale'] = $locale;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status The current status of the order. The status will be ‘incomplete’ until the customer has been successfully authorized.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets billing_address
     *
     * @return \Klarna\Model\Address
     */
    public function getBillingAddress()
    {
        return $this->container['billing_address'];
    }

    /**
     * Sets billing_address
     *
     * @param \Klarna\Model\Address $billing_address Provide the billing address of the customer, if you have collected already. If not, then Klarna will collect the details inside the Klarna Checkout iFrame before authorization. The billing address is the 'home address' where the credit cards and bank accounts are registered under the customer's name.  Note: Once the customer has provided any data in the checkout iframe, updates to this object will be ignored (without generating an error).
     *
     * @return $this
     */
    public function setBillingAddress($billing_address)
    {
        $this->container['billing_address'] = $billing_address;

        return $this;
    }

    /**
     * Gets shipping_address
     *
     * @return \Klarna\Model\Address
     */
    public function getShippingAddress()
    {
        return $this->container['shipping_address'];
    }

    /**
     * Sets shipping_address
     *
     * @param \Klarna\Model\Address $shipping_address Provide the shipping address of the customer, if you have collected already. Unless the customer has explicitly chosen to enter a separate shipping address, this is a clone of billing_address. The customer has the possibility of changing the shipping address inside the Klarna checkout. You will be notified about the change either through the merchant URLs that you provide or through Javascript callbacks.
     *
     * @return $this
     */
    public function setShippingAddress($shipping_address)
    {
        $this->container['shipping_address'] = $shipping_address;

        return $this;
    }

    /**
     * Gets order_amount
     *
     * @return int
     */
    public function getOrderAmount()
    {
        return $this->container['order_amount'];
    }

    /**
     * Sets order_amount
     *
     * @param int $order_amount \"Total amount of the order including tax and any available discounts. The value should be in non-negative minor units.  Example: 25 Euros should be 2500.\"
     *
     * @return $this
     */
    public function setOrderAmount($order_amount)
    {

        if (($order_amount < 0)) {
            throw new \InvalidArgumentException('invalid value for $order_amount when calling Order., must be bigger than or equal to 0.');
        }

        $this->container['order_amount'] = $order_amount;

        return $this;
    }

    /**
     * Gets order_tax_amount
     *
     * @return int
     */
    public function getOrderTaxAmount()
    {
        return $this->container['order_tax_amount'];
    }

    /**
     * Sets order_tax_amount
     *
     * @param int $order_tax_amount Total tax amount of the order. The value should be in non-negative minor units.  Example: 25 Euros should be 2500.
     *
     * @return $this
     */
    public function setOrderTaxAmount($order_tax_amount)
    {

        if (($order_tax_amount < 0)) {
            throw new \InvalidArgumentException('invalid value for $order_tax_amount when calling Order., must be bigger than or equal to 0.');
        }

        $this->container['order_tax_amount'] = $order_tax_amount;

        return $this;
    }

    /**
     * Gets order_lines
     *
     * @return \Klarna\Model\OrderLine[]
     */
    public function getOrderLines()
    {
        return $this->container['order_lines'];
    }

    /**
     * Sets order_lines
     *
     * @param \Klarna\Model\OrderLine[] $order_lines An array containing list of line items that are part of this order. Maximum of 1000 line items could be processed in a single order.
     *
     * @return $this
     */
    public function setOrderLines($order_lines)
    {
        $this->container['order_lines'] = $order_lines;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return \Klarna\Model\Customer
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param \Klarna\Model\Customer $customer Object to provide the details of the customer making the payment.
     *
     * @return $this
     */
    public function setCustomer($customer)
    {
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets merchant_urls
     *
     * @return \Klarna\Model\MerchantUrls
     */
    public function getMerchantUrls()
    {
        return $this->container['merchant_urls'];
    }

    /**
     * Sets merchant_urls
     *
     * @param \Klarna\Model\MerchantUrls $merchant_urls Used to send in the different merchant URLs that Klarna needs at different stages of the process.  Note: it should be HTTPS. Also, it can have {checkout.order.id}, {checkout.order.url} and/or {checkout.order.uri} and KCO will replace it accordingly.
     *
     * @return $this
     */
    public function setMerchantUrls($merchant_urls)
    {
        $this->container['merchant_urls'] = $merchant_urls;

        return $this;
    }

    /**
     * Gets html_snippet
     *
     * @return string
     */
    public function getHtmlSnippet()
    {
        return $this->container['html_snippet'];
    }

    /**
     * Sets html_snippet
     *
     * @param string $html_snippet The HTML snippet that is used to render the checkout in an iframe.
     *
     * @return $this
     */
    public function setHtmlSnippet($html_snippet)
    {
        $this->container['html_snippet'] = $html_snippet;

        return $this;
    }

    /**
     * Gets merchant_reference1
     *
     * @return string
     */
    public function getMerchantReference1()
    {
        return $this->container['merchant_reference1'];
    }

    /**
     * Sets merchant_reference1
     *
     * @param string $merchant_reference1 Used for storing merchant's internal order number or other reference. If set, will be shown on the confirmation page as \"order number\" . The value is also available in the settlement files. (max 255 characters). Example: \"45aa52f387871e3a210645d4\"
     *
     * @return $this
     */
    public function setMerchantReference1($merchant_reference1)
    {
        if (!is_null($merchant_reference1) && (mb_strlen($merchant_reference1) > 255)) {
            throw new \InvalidArgumentException('invalid length for $merchant_reference1 when calling Order., must be smaller than or equal to 255.');
        }
        if (!is_null($merchant_reference1) && (mb_strlen($merchant_reference1) < 0)) {
            throw new \InvalidArgumentException('invalid length for $merchant_reference1 when calling Order., must be bigger than or equal to 0.');
        }

        $this->container['merchant_reference1'] = $merchant_reference1;

        return $this;
    }

    /**
     * Gets merchant_reference2
     *
     * @return string
     */
    public function getMerchantReference2()
    {
        return $this->container['merchant_reference2'];
    }

    /**
     * Sets merchant_reference2
     *
     * @param string $merchant_reference2 Used for storing merchant's internal order number or other reference. The value is available in the settlement files. (max 255 characters). Example: \"45aa52f387871e3a210645d4\"
     *
     * @return $this
     */
    public function setMerchantReference2($merchant_reference2)
    {
        if (!is_null($merchant_reference2) && (mb_strlen($merchant_reference2) > 255)) {
            throw new \InvalidArgumentException('invalid length for $merchant_reference2 when calling Order., must be smaller than or equal to 255.');
        }
        if (!is_null($merchant_reference2) && (mb_strlen($merchant_reference2) < 0)) {
            throw new \InvalidArgumentException('invalid length for $merchant_reference2 when calling Order., must be bigger than or equal to 0.');
        }

        $this->container['merchant_reference2'] = $merchant_reference2;

        return $this;
    }

    /**
     * Gets started_at
     *
     * @return \DateTime
     */
    public function getStartedAt()
    {
        return $this->container['started_at'];
    }

    /**
     * Sets started_at
     *
     * @param \DateTime $started_at ISO 8601 datetime. The date and time when the order has been created. The format will be as follows: \"yyyy-mm-ddThh:mm:ssZ\"
     *
     * @return $this
     */
    public function setStartedAt($started_at)
    {
        $this->container['started_at'] = $started_at;

        return $this;
    }

    /**
     * Gets completed_at
     *
     * @return \DateTime
     */
    public function getCompletedAt()
    {
        return $this->container['completed_at'];
    }

    /**
     * Sets completed_at
     *
     * @param \DateTime $completed_at ISO 8601 datetime. The date and time when the order has been completed. The format will be as follows: \"yyyy-mm-ddThh:mm:ssZ\"
     *
     * @return $this
     */
    public function setCompletedAt($completed_at)
    {
        $this->container['completed_at'] = $completed_at;

        return $this;
    }

    /**
     * Gets last_modified_at
     *
     * @return \DateTime
     */
    public function getLastModifiedAt()
    {
        return $this->container['last_modified_at'];
    }

    /**
     * Sets last_modified_at
     *
     * @param \DateTime $last_modified_at ISO 8601 datetime. The date and time when the order was last modified. The format will be as follows: \"yyyy-mm-ddThh:mm:ssZ\"
     *
     * @return $this
     */
    public function setLastModifiedAt($last_modified_at)
    {
        $this->container['last_modified_at'] = $last_modified_at;

        return $this;
    }

    /**
     * Gets options
     *
     * @return \Klarna\Model\Options
     */
    public function getOptions()
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     *
     * @param \Klarna\Model\Options $options Customization options for the order.
     *
     * @return $this
     */
    public function setOptions($options)
    {
        $this->container['options'] = $options;

        return $this;
    }

    /**
     * Gets attachment
     *
     * @return \Klarna\Model\Attachment
     */
    public function getAttachment()
    {
        return $this->container['attachment'];
    }

    /**
     * Sets attachment
     *
     * @param \Klarna\Model\Attachment $attachment Extra Merchant Data (additional information) required for additional risk check. The required parameters will be described in the appendix of contract agreement.
     *
     * @return $this
     */
    public function setAttachment($attachment)
    {
        $this->container['attachment'] = $attachment;

        return $this;
    }

    /**
     * Gets external_payment_methods
     *
     * @return \Klarna\Model\PaymentProvider[]
     */
    public function getExternalPaymentMethods()
    {
        return $this->container['external_payment_methods'];
    }

    /**
     * Sets external_payment_methods
     *
     * @param \Klarna\Model\PaymentProvider[] $external_payment_methods List of external payment methods that will be displayed as part of payment methods in the checkout.
     *
     * @return $this
     */
    public function setExternalPaymentMethods($external_payment_methods)
    {
        $this->container['external_payment_methods'] = $external_payment_methods;

        return $this;
    }

    /**
     * Gets external_checkouts
     *
     * @return \Klarna\Model\PaymentProvider[]
     */
    public function getExternalCheckouts()
    {
        return $this->container['external_checkouts'];
    }

    /**
     * Sets external_checkouts
     *
     * @param \Klarna\Model\PaymentProvider[] $external_checkouts List of external checkouts that will be displayed as part of payment methods in the checkout.
     *
     * @return $this
     */
    public function setExternalCheckouts($external_checkouts)
    {
        $this->container['external_checkouts'] = $external_checkouts;

        return $this;
    }

    /**
     * Gets shipping_countries
     *
     * @return string[]
     */
    public function getShippingCountries()
    {
        return $this->container['shipping_countries'];
    }

    /**
     * Sets shipping_countries
     *
     * @param string[] $shipping_countries List of allowed shipping countries for this order in ISO-3166 alpha-2 format.  If specified, the customer will be able to change the shipping country in the checkout and you will be notified through ‘address_update’ callback or the ‘shipping_address_change’ javascript event.   If not specified then the default value will be the purchase country.  Example: look at billing_countries example.
     *
     * @return $this
     */
    public function setShippingCountries($shipping_countries)
    {
        $this->container['shipping_countries'] = $shipping_countries;

        return $this;
    }

    /**
     * Gets shipping_options
     *
     * @return \Klarna\Model\ShippingOption[]
     */
    public function getShippingOptions()
    {
        return $this->container['shipping_options'];
    }

    /**
     * Sets shipping_options
     *
     * @param \Klarna\Model\ShippingOption[] $shipping_options A list of shipping options available for this order.
     *
     * @return $this
     */
    public function setShippingOptions($shipping_options)
    {
        $this->container['shipping_options'] = $shipping_options;

        return $this;
    }

    /**
     * Gets merchant_data
     *
     * @return string
     */
    public function getMerchantData()
    {
        return $this->container['merchant_data'];
    }

    /**
     * Sets merchant_data
     *
     * @param string $merchant_data Pass through field to send any information about the order to be used later for reference while retrieving the order details (max 6000 characters).
     *
     * @return $this
     */
    public function setMerchantData($merchant_data)
    {
        if (!is_null($merchant_data) && (mb_strlen($merchant_data) > 6000)) {
            throw new \InvalidArgumentException('invalid length for $merchant_data when calling Order., must be smaller than or equal to 6000.');
        }
        if (!is_null($merchant_data) && (mb_strlen($merchant_data) < 0)) {
            throw new \InvalidArgumentException('invalid length for $merchant_data when calling Order., must be bigger than or equal to 0.');
        }

        $this->container['merchant_data'] = $merchant_data;

        return $this;
    }

    /**
     * Gets gui
     *
     * @return \Klarna\Model\Gui
     */
    public function getGui()
    {
        return $this->container['gui'];
    }

    /**
     * Sets gui
     *
     * @param \Klarna\Model\Gui $gui The gui object.
     *
     * @return $this
     */
    public function setGui($gui)
    {
        $this->container['gui'] = $gui;

        return $this;
    }

    /**
     * Gets merchant_requested
     *
     * @return \Klarna\Model\MerchantRequested
     */
    public function getMerchantRequested()
    {
        return $this->container['merchant_requested'];
    }

    /**
     * Sets merchant_requested
     *
     * @param \Klarna\Model\MerchantRequested $merchant_requested Provides information about the state of the fields requested by the merchant.
     *
     * @return $this
     */
    public function setMerchantRequested($merchant_requested)
    {
        $this->container['merchant_requested'] = $merchant_requested;

        return $this;
    }

    /**
     * Gets selected_shipping_option
     *
     * @return \Klarna\Model\ShippingOption
     */
    public function getSelectedShippingOption()
    {
        return $this->container['selected_shipping_option'];
    }

    /**
     * Sets selected_shipping_option
     *
     * @param \Klarna\Model\ShippingOption $selected_shipping_option Current shipping options selected by the customer.
     *
     * @return $this
     */
    public function setSelectedShippingOption($selected_shipping_option)
    {
        $this->container['selected_shipping_option'] = $selected_shipping_option;

        return $this;
    }

    /**
     * Gets recurring
     *
     * @return bool
     */
    public function getRecurring()
    {
        return $this->container['recurring'];
    }

    /**
     * Sets recurring
     *
     * @param bool $recurring Indicates whether this purchase will create a token that can be used by the merchant to create recurring purchases. This must be enabled for the merchant to use. Default: false  Depending on specified country, recurring could be used for the following payment methods: Pay Later, Direct Debit, Card.
     *
     * @return $this
     */
    public function setRecurring($recurring)
    {
        $this->container['recurring'] = $recurring;

        return $this;
    }

    /**
     * Gets recurring_token
     *
     * @return string
     */
    public function getRecurringToken()
    {
        return $this->container['recurring_token'];
    }

    /**
     * Sets recurring_token
     *
     * @param string $recurring_token Token to be used when creating recurring orders.
     *
     * @return $this
     */
    public function setRecurringToken($recurring_token)
    {
        $this->container['recurring_token'] = $recurring_token;

        return $this;
    }

    /**
     * Gets recurring_description
     *
     * @return string
     */
    public function getRecurringDescription()
    {
        return $this->container['recurring_description'];
    }

    /**
     * Sets recurring_description
     *
     * @param string $recurring_description Description to be added to the recurring order.
     *
     * @return $this
     */
    public function setRecurringDescription($recurring_description)
    {
        if (!is_null($recurring_description) && (mb_strlen($recurring_description) > 255)) {
            throw new \InvalidArgumentException('invalid length for $recurring_description when calling Order., must be smaller than or equal to 255.');
        }
        if (!is_null($recurring_description) && (mb_strlen($recurring_description) < 0)) {
            throw new \InvalidArgumentException('invalid length for $recurring_description when calling Order., must be bigger than or equal to 0.');
        }

        $this->container['recurring_description'] = $recurring_description;

        return $this;
    }

    /**
     * Gets billing_countries
     *
     * @return string[]
     */
    public function getBillingCountries()
    {
        return $this->container['billing_countries'];
    }

    /**
     * Sets billing_countries
     *
     * @param string[] $billing_countries List of allowed billing countries for this order. If specified, the customer will be able to change the billing country in the checkout and you will be notified through ‘country_change’ callback or the ‘billing_address_change’ javascript event. If not specified then the default value will be the purchase country.  Example: [\"AD\", \"AE\", \"AG\", \"AI\", \"AL\", \"AM\", \"AQ\", \"AR\", \"AS\", \"AT\", \"AU\", \"AW\", \"AX\", \"AZ\", \"BA\", \"BB\", \"BD\", \"BE\", \"BF\", \"BG\", \"BH\", \"BJ\", \"BL\", \"BM\", \"BN\", \"BO\", \"BQ\", \"BR\", \"BS\", \"BT\", \"BW\", \"BY\", \"BZ\", \"CA\", \"CF\", \"CH\", \"CI\", \"CK\", \"CL\", \"CM\", \"CN\", \"CO\", \"CR\", \"CU\", \"CV\", \"CW\", \"CX\", \"CY\", \"CZ\", \"DE\", \"DJ\", \"DK\", \"DM\", \"DO\", \"DZ\", \"EC\", \"EE\", \"EG\", \"ER\", \"ES\", \"ET\", \"FI\", \"FJ\", \"FK\", \"FM\", \"FO\", \"FR\", \"GA\", \"GB\", \"GD\", \"GE\", \"GF\", \"GG\", \"GH\", \"GI\", \"GL\", \"GM\", \"GN\", \"GP\", \"GR\", \"GS\", \"GT\", \"GU\", \"GY\", \"HK\", \"HN\", \"HR\", \"HU\", \"ID\", \"IE\", \"IL\", \"IM\", \"IN\", \"IS\", \"IT\", \"JE\", \"JM\", \"JO\", \"JP\", \"KE\", \"KG\", \"KI\", \"KM\", \"KN\", \"KR\", \"KW\", \"KY\", \"KZ\", \"LA\", \"LA\", \"LB\", \"LC\", \"LI\", \"LK\", \"LR\", \"LS\", \"LT\", \"LU\", \"LV\", \"MA\", \"MC\", \"MD\", \"ME\", \"MF\", \"MG\", \"MH\", \"MK\", \"MK\", \"ML\", \"MM\", \"MN\", \"MO\", \"MP\", \"MQ\", \"MR\", \"MT\", \"MU\", \"MV\", \"MW\", \"MX\", \"MY\", \"MZ\", \"NA\", \"NC\", \"NE\", \"NF\", \"NG\", \"NI\", \"NL\", \"NO\", \"NP\", \"NR\", \"NU\", \"NZ\", \"OM\", \"PA\", \"PE\", \"PF\", \"PG\", \"PH\", \"PK\", \"PL\", \"PM\", \"PR\", \"PS\", \"PT\", \"PW\", \"PY\", \"QA\", \"RE\", \"RO\", \"RS\", \"RU\", \"RW\", \"SA\", \"SB\", \"SC\", \"SE\", \"SG\", \"SH\", \"SI\", \"SJ\", \"SK\", \"SL\", \"SM\", \"SN\", \"SR\", \"ST\", \"SV\", \"SX\", \"SZ\", \"TC\", \"TF\", \"TG\", \"TH\", \"TJ\", \"TK\", \"TL\", \"TO\", \"TR\", \"TT\", \"TV\", \"TW\", \"TZ\", \"UA\", \"UG\", \"UM\", \"US\", \"UY\", \"UZ\", \"VA\", \"VC\", \"VG\", \"VI\", \"VN\", \"VU\", \"WF\", \"WS\", \"XK\", \"YT\", \"ZA\", \"ZM\", \"ZW\"]\"
     *
     * @return $this
     */
    public function setBillingCountries($billing_countries)
    {
        $this->container['billing_countries'] = $billing_countries;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[] $tags \"Extra information added to the order.  Example: [\"dangerous_goods\", \"bulky\"]
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


